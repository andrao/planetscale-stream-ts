// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file psdb.proto (package psdb.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
    Message,
    proto3,
    type BinaryReadOptions,
    type FieldList,
    type JsonReadOptions,
    type JsonValue,
    type PartialMessage,
    type PlainMessage,
} from '@bufbuild/protobuf';
import { Role } from './data_pb.js';
import { BindVariable, Field, QueryResult } from './query_pb.js';
import { Session as Session$1 } from './vtgate_pb.js';
import { RPCError } from './vtrpc_pb.js';

/**
 * @generated from message psdb.v1alpha1.User
 */
export class User extends Message<User> {
    /**
     * @generated from field: string username = 1;
     */
    username = '';

    /**
     * @generated from field: string psid = 2;
     */
    psid = '';

    /**
     * @generated from field: psdb.data.v1.Role role = 3;
     */
    role = Role.reader;

    constructor(data?: PartialMessage<User>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.User';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'username', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
        { no: 2, name: 'psid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
        { no: 3, name: 'role', kind: 'enum', T: proto3.getEnumType(Role) },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
        return new User().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
        return new User().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
        return new User().fromJsonString(jsonString, options);
    }

    static equals(
        a: User | PlainMessage<User> | undefined,
        b: User | PlainMessage<User> | undefined,
    ): boolean {
        return proto3.util.equals(User, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.CreateSessionRequest
 */
export class CreateSessionRequest extends Message<CreateSessionRequest> {
    constructor(data?: PartialMessage<CreateSessionRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.CreateSessionRequest';
    static readonly fields: FieldList = proto3.util.newFieldList(() => []);

    static fromBinary(
        bytes: Uint8Array,
        options?: Partial<BinaryReadOptions>,
    ): CreateSessionRequest {
        return new CreateSessionRequest().fromBinary(bytes, options);
    }

    static fromJson(
        jsonValue: JsonValue,
        options?: Partial<JsonReadOptions>,
    ): CreateSessionRequest {
        return new CreateSessionRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(
        jsonString: string,
        options?: Partial<JsonReadOptions>,
    ): CreateSessionRequest {
        return new CreateSessionRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined,
        b: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined,
    ): boolean {
        return proto3.util.equals(CreateSessionRequest, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.CreateSessionResponse
 */
export class CreateSessionResponse extends Message<CreateSessionResponse> {
    /**
     * @generated from field: string branch = 1;
     */
    branch = '';

    /**
     * @generated from field: psdb.v1alpha1.User user = 2;
     */
    user?: User;

    /**
     * @generated from field: psdb.v1alpha1.Session session = 4;
     */
    session?: Session;

    constructor(data?: PartialMessage<CreateSessionResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.CreateSessionResponse';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'branch', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
        { no: 2, name: 'user', kind: 'message', T: User },
        { no: 4, name: 'session', kind: 'message', T: Session },
    ]);

    static fromBinary(
        bytes: Uint8Array,
        options?: Partial<BinaryReadOptions>,
    ): CreateSessionResponse {
        return new CreateSessionResponse().fromBinary(bytes, options);
    }

    static fromJson(
        jsonValue: JsonValue,
        options?: Partial<JsonReadOptions>,
    ): CreateSessionResponse {
        return new CreateSessionResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(
        jsonString: string,
        options?: Partial<JsonReadOptions>,
    ): CreateSessionResponse {
        return new CreateSessionResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined,
        b: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined,
    ): boolean {
        return proto3.util.equals(CreateSessionResponse, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    /**
     * @generated from field: string query = 2;
     */
    query = '';

    /**
     * @generated from field: map<string, query.BindVariable> bind_variables = 3;
     */
    bindVariables: { [key: string]: BindVariable } = {};

    constructor(data?: PartialMessage<ExecuteRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.ExecuteRequest';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
        { no: 2, name: 'query', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
        {
            no: 3,
            name: 'bind_variables',
            kind: 'map',
            K: 9 /* ScalarType.STRING */,
            V: { kind: 'message', T: BindVariable },
        },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
        return new ExecuteRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
        return new ExecuteRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
        return new ExecuteRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined,
        b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined,
    ): boolean {
        return proto3.util.equals(ExecuteRequest, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    /**
     * @generated from field: query.QueryResult result = 2;
     */
    result?: QueryResult;

    /**
     * @generated from field: vtrpc.RPCError error = 3;
     */
    error?: RPCError;

    /**
     * optional timing, in seconds, for the response, if empty or 0, this wasn't set
     * does not exist in the response from a StreamExecute.
     *
     * @generated from field: double timing = 4;
     */
    timing = 0;

    constructor(data?: PartialMessage<ExecuteResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.ExecuteResponse';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
        { no: 2, name: 'result', kind: 'message', T: QueryResult },
        { no: 3, name: 'error', kind: 'message', T: RPCError },
        { no: 4, name: 'timing', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
        return new ExecuteResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
        return new ExecuteResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
        return new ExecuteResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined,
        b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined,
    ): boolean {
        return proto3.util.equals(ExecuteResponse, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.PrepareRequest
 */
export class PrepareRequest extends Message<PrepareRequest> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    /**
     * @generated from field: string query = 2;
     */
    query = '';

    /**
     * @generated from field: map<string, query.BindVariable> bind_variables = 3;
     */
    bindVariables: { [key: string]: BindVariable } = {};

    constructor(data?: PartialMessage<PrepareRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.PrepareRequest';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
        { no: 2, name: 'query', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
        {
            no: 3,
            name: 'bind_variables',
            kind: 'map',
            K: 9 /* ScalarType.STRING */,
            V: { kind: 'message', T: BindVariable },
        },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareRequest {
        return new PrepareRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareRequest {
        return new PrepareRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareRequest {
        return new PrepareRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: PrepareRequest | PlainMessage<PrepareRequest> | undefined,
        b: PrepareRequest | PlainMessage<PrepareRequest> | undefined,
    ): boolean {
        return proto3.util.equals(PrepareRequest, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.PrepareResponse
 */
export class PrepareResponse extends Message<PrepareResponse> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    /**
     * @generated from field: repeated query.Field fields = 2;
     */
    fields: Field[] = [];

    /**
     * @generated from field: vtrpc.RPCError error = 3;
     */
    error?: RPCError;

    constructor(data?: PartialMessage<PrepareResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.PrepareResponse';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
        { no: 2, name: 'fields', kind: 'message', T: Field, repeated: true },
        { no: 3, name: 'error', kind: 'message', T: RPCError },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareResponse {
        return new PrepareResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareResponse {
        return new PrepareResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareResponse {
        return new PrepareResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: PrepareResponse | PlainMessage<PrepareResponse> | undefined,
        b: PrepareResponse | PlainMessage<PrepareResponse> | undefined,
    ): boolean {
        return proto3.util.equals(PrepareResponse, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.CloseSessionRequest
 */
export class CloseSessionRequest extends Message<CloseSessionRequest> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    constructor(data?: PartialMessage<CloseSessionRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.CloseSessionRequest';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
    ]);

    static fromBinary(
        bytes: Uint8Array,
        options?: Partial<BinaryReadOptions>,
    ): CloseSessionRequest {
        return new CloseSessionRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseSessionRequest {
        return new CloseSessionRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(
        jsonString: string,
        options?: Partial<JsonReadOptions>,
    ): CloseSessionRequest {
        return new CloseSessionRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: CloseSessionRequest | PlainMessage<CloseSessionRequest> | undefined,
        b: CloseSessionRequest | PlainMessage<CloseSessionRequest> | undefined,
    ): boolean {
        return proto3.util.equals(CloseSessionRequest, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.CloseSessionResponse
 */
export class CloseSessionResponse extends Message<CloseSessionResponse> {
    /**
     * @generated from field: psdb.v1alpha1.Session session = 1;
     */
    session?: Session;

    /**
     * @generated from field: vtrpc.RPCError error = 2;
     */
    error?: RPCError;

    constructor(data?: PartialMessage<CloseSessionResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.CloseSessionResponse';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'session', kind: 'message', T: Session },
        { no: 2, name: 'error', kind: 'message', T: RPCError },
    ]);

    static fromBinary(
        bytes: Uint8Array,
        options?: Partial<BinaryReadOptions>,
    ): CloseSessionResponse {
        return new CloseSessionResponse().fromBinary(bytes, options);
    }

    static fromJson(
        jsonValue: JsonValue,
        options?: Partial<JsonReadOptions>,
    ): CloseSessionResponse {
        return new CloseSessionResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(
        jsonString: string,
        options?: Partial<JsonReadOptions>,
    ): CloseSessionResponse {
        return new CloseSessionResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: CloseSessionResponse | PlainMessage<CloseSessionResponse> | undefined,
        b: CloseSessionResponse | PlainMessage<CloseSessionResponse> | undefined,
    ): boolean {
        return proto3.util.equals(CloseSessionResponse, a, b);
    }
}

/**
 * @generated from message psdb.v1alpha1.Session
 */
export class Session extends Message<Session> {
    /**
     * @generated from field: bytes signature = 1;
     */
    signature = new Uint8Array(0);

    /**
     * @generated from field: vtgate.Session vitess_session = 2;
     */
    vitessSession?: Session$1;

    constructor(data?: PartialMessage<Session>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = 'psdb.v1alpha1.Session';
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: 'signature', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: 'vitess_session', kind: 'message', T: Session$1 },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {
        return new Session().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {
        return new Session().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {
        return new Session().fromJsonString(jsonString, options);
    }

    static equals(
        a: Session | PlainMessage<Session> | undefined,
        b: Session | PlainMessage<Session> | undefined,
    ): boolean {
        return proto3.util.equals(Session, a, b);
    }
}
